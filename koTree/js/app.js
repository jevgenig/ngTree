// Generated by CoffeeScript 1.8.0
var App, TreeNode,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

TreeNode = (function(_super) {
  __extends(TreeNode, _super);

  function TreeNode() {
    TreeNode.__super__.constructor.apply(this, arguments);
    this._binds = {};
    this.children = ko.observableArray();
    this.filter = ko.observable();
    this.isOpen = ko.observable(true);
    this.on('change', function(d) {
      var prop, value, _ref, _results;
      if (this === d) {
        _ref = d.changed;
        _results = [];
        for (prop in _ref) {
          value = _ref[prop];
          _results.push(this._binds[prop] && this._binds[prop](value));
        }
        return _results;
      }
    });
  }

  TreeNode.prototype.load = function(o) {
    var index, value;
    o = o || {};
    if (o.name) {
      this.set('name', o.name);
    }
    this.children((function() {
      var _ref, _results;
      _ref = o.children;
      _results = [];
      for (index in _ref) {
        value = _ref[index];
        _results.push(this._regChild(new TreeNode().load(value)));
      }
      return _results;
    }).call(this));
    return this;
  };

  TreeNode.prototype.bind = function(name, value) {
    var bind, self;
    self = this;
    bind = this._binds[name] || (this._binds[name] = (ko.observable(this.get(name)).subscribe(function(v) {
      return self.set(name, v);
    })).target);
    if (value !== void 0) {
      this.set(name, value);
    }
    return bind;
  };

  TreeNode.prototype._regChild = function(c) {
    c.on('change', this.trigger.bind(this, 'change'));
    return c;
  };

  TreeNode.prototype.toggle = function() {
    return this.isOpen(!this.isOpen());
  };

  TreeNode.prototype.edit = function() {
    var newName;
    return (newName = prompt('Change name', this.get('name'))) && this._edit(newName);
  };

  TreeNode.prototype._edit = function(newName) {
    return this.set('name', newName);
  };

  TreeNode.prototype.add = function() {
    var newName;
    return (newName = prompt('Enter name')) && this._add(newName);
  };

  TreeNode.prototype._add = function(newName) {
    this.children.push(this._regChild(new TreeNode({
      name: newName
    })));
    return this.trigger('change');
  };

  TreeNode.prototype.toJSON = function() {
    var c, index, json, value;
    json = TreeNode.__super__.toJSON.call(this);
    c = this.children();
    if (c && c.length) {
      json.children = (function() {
        var _results;
        _results = [];
        for (index in c) {
          value = c[index];
          _results.push(value.toJSON());
        }
        return _results;
      })();
    }
    return json;
  };

  TreeNode.prototype.childrenFiltered = function() {
    var children, filter;
    filter = this.filter();
    children = this.children();
    if (filter) {
      return _.filter(children, function(child) {
        return ((child.bind('name'))().indexOf(filter)) > -1;
      });
    } else {
      return children;
    }
  };

  return TreeNode;

})(Backbone.Model);

App = (function() {
  function App() {
    var treeNode;
    this.treeNode = treeNode = (new TreeNode({
      name: 'Root',
      level: 0
    })).load(JSON.parse(localStorage.getItem('koTree'))).on('change', function() {
      return localStorage.setItem('koTree', JSON.stringify(treeNode.toJSON()));
    });
  }

  App.prototype.render = function(el) {
    ko.applyBindings(this.treeNode, el.get && el.get(0) || el);
    return this;
  };

  return App;

})();
